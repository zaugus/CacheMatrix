# makeCacheMatrix 

# 1. set the matrix
# 2. get the matrix
# 3. set the inverse
# 4. get the inverse
makeCacheMatrix <- function(x = matrix()) 
    
    {
         inv <- NULL
         set <- function(y) 
         # '<<-' assigns a value to an object in an environment
         # different from the current one.
         {
         x <<- y
         inv <<- NULL
         }
     
    get <- function() x
    setinverse <- function(inverse) inv <<- inverse
    getinverse <- function() inv
    list(set=set,
          get=get, 
          setinverse=setinverse,  
          getinverse=getinverse)
    }


#cacheSolve

# x- output of makeCacheMatrix()

cacheSolve <- function(x, ...) 
{
    inv <- x$getinverse()
    
    # if the inverse has already been calculated
    
    if(!is.null(inv)) 
    # get it from the cache and skips the computation
    
{
       message("getting cached data.")
        return(inv)
    }
    #otherwise, calculates the inverse
    data <- x$get()
    inv <- solve(data)
    #sets the value of the inverse in the cache through the setinverse function
    x$setinverse(inv)
    inv
}

#sample test

test<-makeCacheMatrix(matrix(1:4,2,2))
test$get()
      [,1][,2]
[,1]    1   3
[,2]    2   4
test$getInverse()
NULL
cacheSolve(test)
      [,1] [,2]
[,1]    -2   1.5
[,2]     1  -0.5
cacheSolve(test)
getting cached data
      [,1] [,2]
[,1]    -2   1.5
[,2]     1  -0.5
test$getInverse()
       [,1] [,2]
[,1]     -2   1.5
[,2]      1  -0.5
